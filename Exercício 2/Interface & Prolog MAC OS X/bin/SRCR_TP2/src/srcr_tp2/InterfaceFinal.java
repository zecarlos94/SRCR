/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package srcr_tp2;

import static java.lang.System.exit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import se.sics.jasper.*;



/**
 *
 * @author zecarlos
 */
public class InterfaceFinal extends javax.swing.JFrame {
    private static int type=0,args=0,ok=0;
    private static String query_tipo_outra, query_tipo_normal, query_tipo_valor_verdade;
    private static String pred,arg_1,arg_2,arg_3,arg_4;
    private static SICStus sp;
    
    /**
     * Creates new form InterfacePronta
     */
    public InterfaceFinal() {
        initComponents();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Procurar Ficheiro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Valor de Verdade", "Normal", "Outra" }));
        jComboBox1.setMinimumSize(new java.awt.Dimension(160, 25));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo de Query");

        jLabel2.setText("Predicados Disponíveis");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha Primeiro o Tipo" }));
        jComboBox2.setMinimumSize(new java.awt.Dimension(160, 25));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jTextField2.setText("Insira a query completa!");

        jButton2.setText("Executar Query\n");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField3.setText("1º Argumento");

        jTextField4.setText("2º Argumento");

        jTextField5.setText("3º Argumento");

        jTextField6.setText("4º Argumento");

        jLabel4.setText("Insira os N argumentos que serão recomendados na devida altura");

        jButton4.setText("Leitura ");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel2)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField2)
                                    .addComponent(jTextField4)
                                    .addComponent(jTextField5)
                                    .addComponent(jTextField6)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(16, 16, 16)
                                            .addComponent(jLabel3))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButton1)
                                            .addGap(18, 18, 18)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    JFileChooser procurar = new JFileChooser();
    procurar.setCurrentDirectory(new java.io.File("."));
    procurar.setDialogTitle("Escolha o seu ficheiro: ");
    procurar.setFileSelectionMode(JFileChooser.FILES_ONLY);
    procurar.setAcceptAllFileFilterUsed(false);

    if (procurar.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      jTextField1.setText(procurar.getSelectedFile().toString());
    } else {
      jTextField1.setText("");
    }    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      switch(type){
        case 1: //query do tipo valor de verdade
                query_tipo_valor_verdade="";
                jTextArea1.setText("");
                HashMap hhh = new HashMap();
                pred  = (String)jComboBox2.getSelectedItem();
                switch(pred){   // Tem de ser letras Maiusculas!!!        
                    case "registar":
                                    args = 1;
                                    arg_1 = jTextField3.getText();
                                    if(!(arg_1.equals(""))){ok=1;}
                                    break;
                                                    
                    case "utente":
                                    args = 4;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    arg_3 = jTextField5.getText();
                                    arg_4 = jTextField6.getText();
                                    if(
                                        (!(arg_1.equals(""))) &&
                                        (!(arg_2.equals(""))) &&
                                        (!(arg_3.equals(""))) &&
                                        (!(arg_4.equals("")))                                                   
                                    ){ok=1;}
                                    break;
                                    
                    case "servico":
                                    args = 4;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    arg_3 = jTextField5.getText();
                                    arg_4 = jTextField6.getText();
                                    if(
                                        (!(arg_1.equals(""))) &&
                                        (!(arg_2.equals(""))) &&
                                        (!(arg_3.equals(""))) &&
                                        (!(arg_4.equals("")))                                                   
                                    ){ok=1;}
                                    break;
                                    
                    case "consulta":
                                    args = 4;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    arg_3 = jTextField5.getText();
                                    arg_4 = jTextField6.getText();
                                    if(
                                        (!(arg_1.equals(""))) &&
                                        (!(arg_2.equals(""))) &&
                                        (!(arg_3.equals(""))) &&
                                        (!(arg_4.equals("")))                                                   
                                    ){ok=1;}
                                    break;                                                                 
                }       
                System.out.println("Argumento 1 => "+arg_1); 
                System.out.println("Argumento 2 => "+arg_2); 
                System.out.println("Argumento 3 => "+arg_3); 
                System.out.println("Argumento 4 => "+arg_4); 
                if(ok==0){ // Campos Vazios
                    System.out.println("Campos dos Argumentos Vazios"); 
                    jTextArea1.append("Campos dos Argumentos Vazios\n");
                }
                else if(ok==1){
                    try {
                    // Não existem campos vazios
                    switch(args){
                        case 1:
                            query_tipo_valor_verdade = pred+"("+arg_1+").";
                            break;
                            
                        case 2:
                            query_tipo_valor_verdade = pred+"("+arg_1+","+arg_2+").";
                            break;
                            
                        case 4:
                            query_tipo_valor_verdade = pred+"("
                                    +arg_1+","+arg_2+","
                                    +arg_3+","+arg_4+").";
                            break;
                    }                    
                    boolean qq = sp.query(query_tipo_valor_verdade,hhh);
                    System.out.println(query_tipo_valor_verdade);
                    System.out.println("Resultado => "+qq);
                    jTextArea1.append("Predicado Executado => "+ query_tipo_valor_verdade +"\n");                       
                    jTextArea1.append(qq+"\n");
                   
                }catch (SPException ex){
                    Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("SPException caught");
                    System.out.println("boolean qq = sp.query failed");
                }
                }                       
                break;
                
        case 2: //query do tipo normal            
                query_tipo_normal="";
                jTextArea1.setText("");
                Query qq;
                HashMap hh = new HashMap();
                pred  = (String)jComboBox2.getSelectedItem();                        
                switch(pred){     // Tem de ser letras Maiusculas!!!        
                    case "listing": // listing(utente). equivale a listagem(utente,S).
                                    args = 1;
                                    arg_1 = jTextField3.getText();                                  
                                    if(!(arg_1.equals(""))){ok=2;}
                                    break;
                                    
                    case "exception":
                                    args = 1;
                                    arg_1 = jTextField3.getText();
                                    if(Character.isUpperCase(arg_1.charAt(0))){ok=1;}
                                    break;
                    case "demo":
                                    args = 2;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    if((Character.isUpperCase(arg_2.charAt(0)))){ok=1;}
                                    break;
                                    
                    case "demoExtendido":
                                    args = 2;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    if((Character.isUpperCase(arg_2.charAt(0)))){ok=3;}
                                    break;                
                                                    
                    case "utente":
                                    args = 4;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    arg_3 = jTextField5.getText();
                                    arg_4 = jTextField6.getText();
                                    if(
                                        (Character.isUpperCase(arg_1.charAt(0))) &&
                                        (Character.isUpperCase(arg_2.charAt(0))) &&
                                        (Character.isUpperCase(arg_3.charAt(0))) &&
                                        (Character.isUpperCase(arg_4.charAt(0)))                                                   
                                       ){ok=1;}
                                    break;
                                    
                    case "servico":
                                    args = 4;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    arg_3 = jTextField5.getText();
                                    arg_4 = jTextField6.getText();
                                    if(
                                        (Character.isUpperCase(arg_1.charAt(0))) &&
                                        (Character.isUpperCase(arg_2.charAt(0))) &&
                                        (Character.isUpperCase(arg_3.charAt(0))) &&
                                        (Character.isUpperCase(arg_4.charAt(0)))                                                   
                                    ){ok=1;}
                                    break;
                                    
                    case "consulta":
                                    args = 4;
                                    arg_1 = jTextField3.getText();
                                    arg_2 = jTextField4.getText();
                                    arg_3 = jTextField5.getText();
                                    arg_4 = jTextField6.getText();
                                    if(
                                        (Character.isUpperCase(arg_1.charAt(0))) &&
                                        (Character.isUpperCase(arg_2.charAt(0))) &&
                                        (Character.isUpperCase(arg_3.charAt(0))) &&
                                        (Character.isUpperCase(arg_4.charAt(0)))                                                   
                                    ){ok=1;}
                                    break;                                                                     
                }                           
                System.out.println("Argumento 1 => "+arg_1); 
                System.out.println("Argumento 2 => "+arg_2); 
                System.out.println("Argumento 3 => "+arg_3); 
                System.out.println("Argumento 4 => "+arg_4); 
                if(ok==0){ // Não são Variavéis
                    System.out.println("Campos dos Argumentos mal preenchidos"); 
                    System.out.println("Apenas é permitido letras maiúsculas");
                    jTextArea1.append("Campos dos Argumentos mal preenchidos\n");
                    jTextArea1.append("Apenas é permitido letras maiúsculas\n");
                }
                else if(ok==2){                     
                    try { //caso particular do listing(predicado).
                    query_tipo_normal="listagem("+arg_1+",R)." ;   
                    System.out.println(query_tipo_normal);
                    System.out.println("listing("+arg_1+").");
                    qq = sp.openPrologQuery(query_tipo_normal,hh);
                    jTextArea1.append("Predicado Executado => "+ "listing("+arg_1+")." +"\n");
                        try {
                            qq.nextSolution();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    int i=1;
                    ArrayList<String> a = new ArrayList<>();
                    String token;
                    String resultado;
                    String aux = hh.toString();                    
                    resultado=(aux.substring(4, aux.length()-1));
                    System.out.println("Resultado Original: "+resultado);
                    StringTokenizer multiTokenizer = new StringTokenizer(resultado, ".");
                    while (multiTokenizer.hasMoreTokens()){
                        token=multiTokenizer.nextToken();                        
                        a.add(token);
                    }
                    for(String s: a){
                        String temp;
                        if(i==a.size()){ //última string
                            temp = (s.substring(1, s.length()-7)); 
                        } 
                        else{
                            temp = (s.substring(1, s.length()-1)); 
                        }
                        jTextArea1.append("Solução #"+i+" => "+temp+"\n");                        
                        System.out.println("Solução #"+i+" => "+temp);
                        i++;
                        
                    }
                   
                    
                     
                    try {
                        qq.close();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("InterruptedException caught");
                        System.out.println("qq.close() failed");
                    } catch (Exception ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Exception caught");
                        System.out.println("qq.close() failed");
                    }
                } catch (SPException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("listing failed");
                    }
                }
                else if(ok==3){ 
                    try {
                    // São Variavéis
                    switch(args){
                        case 1:
                            query_tipo_normal = pred+"("+arg_1+").";
                            break;
                            
                        case 2:
                            query_tipo_normal = pred+"("+ arg_1+","+arg_2+").";
                            break;
                            
                        case 4:
                            query_tipo_normal = pred+"("
                                    +arg_1+","+arg_2+","
                                    +arg_3+","+arg_4+").";
                            break;
                    }                                              
                    System.out.println(query_tipo_normal);
                    
                    qq = sp.openPrologQuery(query_tipo_normal,hh);
                    jTextArea1.append("Predicado Executado => "+ query_tipo_normal +"\n");
                    int j=1;
                    try {
                        while (qq.nextSolution()) { //parsing da string resposta do hashmap
                            int i=0;
                            String resultado;
                            String aux = hh.toString();
                            while(aux.charAt(i)!='{'){ i++; }
                            i++;
                            resultado=(aux.substring(i, aux.length()-1));
                            if(j==1) jTextArea1.append("Solução #"+j+" => "+resultado +"\n");
                            j++;
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("InterruptedException caught");
                        System.out.println("qq.nextSolution() failed");
                    } catch (Exception ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Exception caught");
                        System.out.println("qq.nextSolution() failed");
                    }
                    try {
                        qq.close();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("InterruptedException caught");
                        System.out.println("qq.close() failed");
                    } catch (Exception ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Exception caught");
                        System.out.println("qq.close() failed");
                    }
                    }catch (SPException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("OpenPrologQuery failed");
                        System.out.println("SPException caught");
                    }
                }
                else if(ok==1){ 
                    try {
                    // São Variavéis
                    switch(args){
                        case 1:
                            query_tipo_normal = pred+"("+arg_1+").";
                            break;
                            
                        case 2:
                            query_tipo_normal = pred+"("+ arg_1+","+arg_2+").";
                            break;
                            
                        case 4:
                            query_tipo_normal = pred+"("
                                    +arg_1+","+arg_2+","
                                    +arg_3+","+arg_4+").";
                            break;
                    }                                              
                    System.out.println(query_tipo_normal);
                    
                    qq = sp.openPrologQuery(query_tipo_normal,hh);
                    jTextArea1.append("Predicado Executado => "+ query_tipo_normal +"\n");
                    int j=1;
                    try {
                        while (qq.nextSolution()) { //parsing da string resposta do hashmap
                            int i=0;
                            String resultado;
                            String aux = hh.toString();
                            while(aux.charAt(i)!='{'){ i++; }
                            i++;
                            resultado=(aux.substring(i, aux.length()-1));
                            jTextArea1.append("Solução #"+j+" => "+resultado +"\n");
                            j++;
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("InterruptedException caught");
                        System.out.println("qq.nextSolution() failed");
                    } catch (Exception ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Exception caught");
                        System.out.println("qq.nextSolution() failed");
                    }
                    try {
                        qq.close();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("InterruptedException caught");
                        System.out.println("qq.close() failed");
                    } catch (Exception ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Exception caught");
                        System.out.println("qq.close() failed");
                    }
                    }catch (SPException ex) {
                        Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("OpenPrologQuery failed");
                        System.out.println("SPException caught");
                    }
                }   
                break;
          
        case 3: //query do tipo outra 
                query_tipo_outra="";
                jTextArea1.setText("");  
        try {
            if(!(jTextField2.getText().equals(""))){           
            query_tipo_outra=jTextField2.getText();
            Query q;
            HashMap h = new HashMap();
            System.out.println(query_tipo_outra);
            q = sp.openPrologQuery(query_tipo_outra,h);
            jTextArea1.append("Predicado Executado => "+ query_tipo_outra +"\n");
            int j=1;
            
            try {
                while (q.nextSolution()) { //parsing da string resposta do hashmap
                    int i=0;
                    String resultado;
                    String aux = h.toString();
                    while(aux.charAt(i)!='{'){ i++; }
                    i++;
                    resultado=(aux.substring(i, aux.length()-1));
                    jTextArea1.append("Solução #"+j+" => "+resultado +"\n");
                    j++;
                }
            } catch (Exception ex) {
                Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Exception caught");
                System.out.println("q.nextSolution() failed");
            }
            try {
                q.close();
            } catch (Exception ex) {
                Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Exception caught");
                System.out.println("q.close() failed");
            }
        }else{
                System.out.println("TextField Vazia -> Query Impossível");
                jTextArea1.append("TextField Vazia -> Query Impossível");
        }
        } catch (SPException ex) {
            Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("OpenPrologQuery failed");
            System.out.println("SPException caught");
        }
                break;
      }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String tipo=(String)jComboBox1.getSelectedItem();
        switch(tipo){
            case "Valor de Verdade":
                           jComboBox2.removeAllItems();                           
                           jComboBox2.addItem("registar");                           
                           jComboBox2.addItem("utente");
                           jComboBox2.addItem("servico");
                           jComboBox2.addItem("consulta");                           
                           type=1;
                           jTextArea1.setText("");
                           jLabel3.setText("");
                           jLabel4.setText("Insira os N argumentos que serão recomendados na devida altura");
                           jTextField2.setText("");
                           jTextField3.setText("");
                           jTextField4.setText("");
                           jTextField5.setText("");
                           jTextField6.setText("");
                           break;
                           
            case "Normal":
                           jComboBox2.removeAllItems(); 
                           jComboBox2.addItem("demo");
                           jComboBox2.addItem("demoExtendido");
                           jComboBox2.addItem("utente");
                           jComboBox2.addItem("servico");
                           jComboBox2.addItem("consulta"); 
                           jComboBox2.addItem("exception"); 
                           jComboBox2.addItem("listing");
                           type=2;
                           jTextArea1.setText("");
                           jLabel3.setText("");
                           jLabel4.setText("Insira os N argumentos que serão recomendados na devida altura");
                           jTextField2.setText("");
                           jTextField3.setText("");
                           jTextField4.setText("");
                           jTextField5.setText("");
                           jTextField6.setText("");
                           break;
            case "Outra":
                           jComboBox2.removeAllItems();
                           jLabel3.setText("Escolheu a opção 'Outra'");
                           jLabel4.setText("Carregue já no botão 'Executar Query'"); 
                           jComboBox2.addItem("nenhum");
                           type=3;
                           jTextArea1.setText("");
                           jTextField2.setText("");
                           jTextField3.setText("");
                           jTextField4.setText("");
                           jTextField5.setText("");
                           jTextField6.setText("");
                           break;
        }
               
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
      if(type!=3 && jComboBox2.getItemCount()>0) {
        String nomePredicado=(String)jComboBox2.getSelectedItem();
        switch(nomePredicado){  
            case "listing":
                            jLabel4.setText("Introduza 1 argumento do predicado que acabou de escolher por ordem");
                            break; 
            case "registar":
                            jLabel4.setText("Introduza 1 termo para evoluir a base de conhecimento");           
                            break;
            case "exception":
                            jLabel4.setText("Insira 1 predicado para ser excepção");
                            break;               
            case "utente":
                            jLabel4.setText("Insira os 4 argumentos do predicado utente por ordem");
                            break;               
            case "servico":
                            jLabel4.setText("Insira os 4 argumentos do predicado serviço por ordem");
                            break;
            case "consulta":
                            jLabel4.setText("Insira os 4 argumentos do predicado consulta por ordem");
                            break;                              
            case "demo":
                           jLabel4.setText("Introduza os 2 argumentos do predicado que acabou de escolher por ordem");
                           break;  
            case "demoExtendido":
                           jLabel4.setText("Introduza os 2 argumentos do predicado que acabou de escolher por ordem");
                           break;                  
        }                   
      }
        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {  
            this.sp = new SICStus();
            if(jTextField1.getText().equals("")){
                sp.load("exercicio2.pl");
            }
            else{
                sp.load(jTextField1.getText());
            }           
        } catch (SPException ex) {
            Logger.getLogger(InterfaceFinal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("SPException caught in main function");
            System.out.println("Falha na Inicialização do SICStus");
        }
    }//GEN-LAST:event_jButton4ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
